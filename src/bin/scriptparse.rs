use mt_renderer::{
    get_enum_value,
    mtserializer::{self, Class, PropertyValue},
    rguimessage::GuiMessageFile,
};

#[derive(Debug, strum::FromRepr, Copy, Clone)]
enum TagCommandMinusOne {
    EndScript = 0,
    Wait = 2,
    Jump = 3,
    FontColor00 = 4,
    FontColor01 = 5,
    FontColor02 = 6,
    FontColor03 = 7,
    FontColor04 = 8,
    FontColor05 = 9,
    FontColor06 = 0xa,
    FontColor07 = 0xb,
    FontColor08 = 0xc,
    FontColor09 = 0xd,
    FontColor10 = 0xe,
    FontColor11 = 0xf,
    FontColor12 = 0x10,
    FontColor13 = 0x11,
    FontColor14 = 0x12,
    RegSet = 0x13,
    BranchReg = 0x14,
    BranchRand = 0x15,
    PageClear = 0x16,
    PageClearAuto = 0x17,
    TextSpeed = 0x18,
    Call = 0x19,
    PageClearDummy = 0x1a,
    FlagOn = 0x1b,
    FlagOff = 0x1c,
    BranchFlag = 0x1d,
    SceneJump = 0x1e,
    BranchScenarioJump = 0x1f,
    CallExternal = 0x20,
    CallRand = 0x21,
    SetPrintPage = 0x22,
    SetPrintDisp = 0x23,
    RegAdd = 0x24,
    RegSub = 0x25,
    CallRandPair = 0x26,
    RightAdjust = 0x27,
    Msg = 0x28,
    CenterText = 0x29,
    AYA2 = 0x2a,
    AYA3 = 0x2b,
    BAK2 = 0x2c,
    GEK2 = 0x2d,
    BranchFlags = 0x31,
    BranchFlagsSet = 0x32,
    BranchScene = 0x33,
    MsgSkipInvalid = 0x34,
    MsgSe = 0x35,
    OpDemoTitle = 0x36,
    CourtFileBtnVisible = 0x37,
    OpTitle = 0x38,
    BranchCamera = 0x39,
    ThumbnailOn = 0x3b,
    ThumbnailOff = 0x3c,
    ThumbnailOnScreen = 0x3d,
    ThumbnailOffAt = 0x3e,
    ThumbnailFadeSwap = 0x3f,
    FilterSet = 0x40,
    FilterWait = 0x41,
    Large = 0x42,
    PageClearLarge = 0x43,
    BgmVolumeOf = 0x44,
    MasterFade = 0x45,
    MasterFadeWait = 0x46,
    BgFade = 0x47,
    BgFadeWait = 0x48,
    FadeModel = 0x49,
    FadeModelWait = 0x4a,
    FlashBack = 0x4c,
    ButtonFlicker = 0x4d,
    LoadingEnd = 0x4f,
    BgmContext = 0x50,
    BgmWait = 0x51,
    BgmSwap = 0x52,
    BgmFadeOutOf = 0x53,
    BgmPlay = 0x54,
    SePlay = 0x55,
    SeStop = 0x57,
    BgmVolume = 0x58,
    SeVolume = 0x59,
    BgmFadeIn = 0x5a,
    BgmFadeOut = 0x5b,
    SeFadeIn = 0x5c,
    SeFadeOut = 0x5d,
    SeLoad = 0x5e,
    SeUnload = 0x5f,
    SeWait = 0x60,
    SeKeyoff = 0x61,
    SeVolumeOf = 0x62,
    ItemAdd = 0x63,
    ItemRemove = 0x64,
    ItemRemoveAll = 0x65,
    EvidenceGet = 0x66,
    EvidenceGetWait = 0x67,
    EvidenceUpdate = 0x68,
    ItemUpdate = 0x69,
    BranchItem = 0x6a,
    BranchItems = 0x6b,
    BranchItemsSet = 0x6c,
    ProfileGet = 0x6d,
    ProfileUpdate = 0x6e,
    BgmPlayVolume = 0x6f,
    BgmWaitOf = 0x70,
    SetAnotherCut = 0x72,
    InvDetailCameraSet = 0x73,
    BgOrnamentFadeWait = 0x76,
    BgSet = 0x77,
    BgOrnament = 0x78,
    UseBgCameraOnly = 0x79,
    BgChange = 0x7a,
    CameraSetChr = 0x7b,
    ChrStopSe = 0x7c,
    CameraDemoLoop = 0x7d,
    ChrSetShadow = 0x7e,
    ChrDelShadow = 0x7f,
    CameraDemo = 0x80,
    CameraSet = 0x81,
    CameraWait = 0x82,
    FontEnglish = 0x83,
    FontEnglishEnd = 0x84,
    CameraDoShortRotation = 0x85,
    ChrPosSet = 0x86,
    ChrAnimeShort = 0x87,
    ChrWaitWithoutMot = 0x89,
    ChrWaitEvent = 0x8a,
    ChrSet = 0x8b,
    ChrDel = 0x8c,
    ChrSetBG = 0x8d,
    ChrDelWitness = 0x8e,
    ChrWait = 0x8f,
    ChrAnime = 0x90,
    ChrAnimeNoStart = 0x92,
    ChrSetNoStart = 0x93,
    ChrFace = 0x94,
    ChrLoadMulti = 0x96,
    ChrLoad = 0x97,
    ChrUnload = 0x98,
    ChrPos = 0x99,
    ChrPosBg = 0x9a,
    ChrMatChg = 0x9b,
    ChrVisible = 0x9c,
    BranchChrSet = 0x9d,
    ChrAnimeRepeat = 0x9f,
    ChrUnloadAll = 0xa0,
    ChrSetChild = 0xa1,
    ChrAnimeSpecial = 0xa3,
    ChrAnimeSpecialNoSe = 0xa4,
    ChrSetSlide = 0xa5,
    ChrSetSlideNoStart = 0xa6,
    ChrDelSlide = 0xa7,
    ChrMouth = 0xa8,
    ChrAlpha = 0xa9,
    ChrSight = 0xaa,
    ChrSightSp = 0xab,
    ChrSightOff = 0xac,
    ScrollShow = 0xad,
    ScrollEnd = 0xae,
    ScrollMove = 0xaf,
    ScrollWait = 0xb0,
    BandRot = 0xb1,
    BandRotOff = 0xb2,
    ChrSightAllReset = 0xb3,
    BigFont = 0xbd,
    BigFontWait = 0xbe,
    BigFontOff = 0xbf,
    MarkTestimony = 0xc1,
    Testimony = 0xc2,
    TestimonyWait = 0xc3,
    Guilty = 0xc6,
    GuiltyWait = 0xc7,
    NotGuilty = 0xc8,
    RetryTopicFlag = 0xc9,
    Examine = 0xcc,
    ExamineWait = 0xcd,
    ScenarioMode = 0xce,
    HammerPlay = 0xcf,
    HammerWait = 0xd0,
    DemoPlay = 0xd1,
    DemoWait = 0xd2,
    PageClearIgiariWait = 0xd3,
    HammerPlayStopSound = 0xd4,
    NowDataSet = 0xd5,
    MoveButtonVisible = 0xd6,
    TopicBackButtonVisible = 0xd7,
    InvEviGoto = 0xd9,
    InvEviRet = 0xda,
    ChoiceStart = 0xdb,
    ChoiceInit = 0xdc,
    ChoiceSet = 0xdd,
    ChoiceJump = 0xde,
    ThrustForce = 0xdf,
    BranchThrustForce = 0xe0,
    BranchThrustForce2 = 0xe1,
    OpDemoPlay = 0xe2,
    OpDemoWait = 0xe3,
    OpDemoEnd = 0xe4,
    DemoEnd = 0xe5,
    BranchThrustForce3 = 0xe6,
    ExamMessInit = 0xef,
    ExamMessSet = 0xf0,
    ExamMessEnd = 0xf1,
    ExamStart = 0xf2,
    ExamAnswerSet = 0xf3,
    ExamMessNextSet = 0xf4,
    BranchExamNextFollow = 0xf7,
    BranchExamFaild = 0xf8,
    PlayerSet = 0x101,
    MsgExamPartner = 0x103,
    BloodEffect = 0x10d,
    WineEffect = 0x10e,
    InvEvidenceMotion = 0x110,
    InvEvidenceMotionWait = 0x111,
    InvEvidenceValidHits = 0x112,
    InvEvidenceReady = 0x113,
    InvEvidenceStartTutorial = 0x114,
    InvSaveCharacter = 0x115,
    GaugePreDamage = 0x116,
    GaugeIn = 0x117,
    GaugeOut = 0x118,
    GaugeWait = 0x119,
    GaugeDamage = 0x11a,
    BranchLifeZero = 0x11b,
    GaugeReset = 0x11d,
    RetryItemStore = 0x11e,
    RetryItemStore2 = 0x11f,
    InvUse2DCamera = 0x120,
    InvEvidenceDemo = 0x121,
    InvEvidenceFinish = 0x122,
    InvEvidenceInit = 0x123,
    InvEvidenceStart = 0x124,
    TopViewWait = 0x125,
    TopViewPOInit = 0x126,
    TopViewOpen = 0x127,
    TopViewNext = 0x128,
    TopViewSet = 0x129,
    TopViewClose = 0x12a,
    EventShow = 0x12b,
    EventEnd = 0x12c,
    TextcutShow = 0x12d,
    TextcutEnd = 0x12e,
    EventFadeSwap = 0x12f,
    EventFadeWait = 0x130,
    POInit = 0x131,
    POStart = 0x132,
    POPointClose = 0x133,
    POEventClose = 0x134,
    POFinish = 0x135,
    InvInit = 0x136,
    InvCamAdd = 0x137,
    InvLabelSet = 0x138,
    BranchHit = 0x139,
    InvDetailCamera = 0x13a,
    InvCameraWait = 0x13b,
    InvCameraReturn = 0x13c,
    InvHitSet = 0x13d,
    InvMotionSet = 0x13e,
    InvMotionWait = 0x13f,
    InvCameraSet = 0x140,
    InvConditionAdd = 0x141,
    InvSetFinish = 0x142,
    InvOpen = 0x143,
    BranchInvCondition = 0x144,
    InvLabelSetEvi = 0x145,
    BranchHitEvidence = 0x146,
    InvUseLumi = 0x147,
    OrnamentUseColor = 0x148,
    AYA = 0x149,
    DAM = 0x14a,
    GEK = 0x14b,
    HIR = 0x14c,
    HIR2 = 0x14d,
    SHO = 0x14e,
    Flash = 0x151,
    Flash2 = 0x152,
    FlashWait = 0x153,
    Quake0 = 0x154,
    Quake1 = 0x155,
    Quake2 = 0x156,
    QuakeWait = 0x157,
    BAK = 0x158,
    SKN = 0x159,
    QuakeA = 0x15a,
    DAM0 = 0x15b,
    GEK0 = 0x15c,
    SHO0 = 0x15e,
    BAK0 = 0x15f,
    SKN0 = 0x160,
    BranchExamThrust = 0x162,
    CRI = 0x163,
    GameNewOver = 0x168,
    GameOverPair = 0x169,
    GameOverPanelLess = 0x16a,
    DetectiveSupporterType = 0x16e,
    DetectiveTalkSetEnd = 0x16f,
    DetectiveInit = 0x170,
    DetectiveIndexInit = 0x171,
    DetectiveMode = 0x172,
    DetectiveSetIndexTalk = 0x173,
    DetectiveSetIndexInvest = 0x174,
    DetectiveSetIndexMove = 0x175,
    DetectiveSetIndexThrust = 0x176,
    DetectiveTalkForceIn = 0x177,
    DetectiveTalkSet = 0x178,
    DetectiveTalkUpdate = 0x179,
    DetectiveThrustInit = 0x17a,
    DetectiveThrustSet = 0x17b,
    BranchDetectiveThrust = 0x17c,
    DetectiveIndexInitEnd = 0x17d,
    DetectiveInvestLabel = 0x17e,
    BranchDetectiveSetup = 0x17f,
    DetectiveTopicInit = 0x180,
    DetectiveMoveSet = 0x181,
    DetectiveMoveCloseReturn = 0x182,
    DetectiveTalkSetConditional = 0x183,
    DetectiveMoveMsg = 0x184,
    DetectiveEndInit = 0x185,
    DetectiveEndItemSet = 0x186,
    DetectiveEndFlagSet = 0x187,
    DetectiveStart = 0x188,
    BranchDetectiveEnd = 0x189,
    IntervalOpen = 0x18a,
    IntervalOpenWait = 0x18b,
    Interval = 0x18c,
    DetectiveDefaultMode = 0x18d,
    SetAntiAlias = 0x18e,
    DetectiveTalkInsert = 0x18f,
    DetectiveButtonEventSet = 0x191,
    DetectiveButtonEventClear = 0x192,
    DetectiveMoveExplainSet = 0x193,
    DetectiveMoveExplainSetConditional = 0x194,
    DetectiveMoveAdd = 0x195,
    Witness = 0x196,
    BranchWitness = 0x197,
    DetectiveMoveAddCkFlag = 0x198,
    IconA = 0x1a3,
    IconB = 0x1a4,
    IconY = 0x1a5,
    IconX = 0x1a6,
    IconL = 0x1a7,
    IconR = 0x1a8,
    IconCross = 0x1a9,
    IconSlide = 0x1aa,
    IconRecord = 0x1ab,
    IconThrust = 0x1ac,
    IconSway = 0x1ad,
    IconCheck = 0x1ae,
    IconQuestion = 0x1af,
    IconDetail = 0x1b0,
    IconHit = 0x1b1,
    IconReturn = 0x1b2,
    PanelMessageStart = 0x1b3,
    PanelMessageEnd = 0x1b4,
    EventMove = 0x1b7,
    EventMoveWait = 0x1b8,
    EventShowBg = 0x1bb,
    MoviePlay = 0x1bc,
    MovieWait = 0x1bd,
    LinePlay = 0x1be,
    MemoSetTask = 0x1c0,
    MemoAllRemove = 0x1c1,
    MemoTaskFinish = 0x1c2,
    MemoSetSummary = 0x1c3,
    EventFadeOutBg = 0x1c5,
    MemoSetSummaryP2 = 0x1c6,
    PushFlag = 0x1c8,
    PopFlag = 0x1c9,
    MsgPre = 0x1ca,
    CameraGotoPosition = 0x1cd,
    CameraGotoFocus = 0x1cf,
    CameraGotoFov = 0x1d1,
    CameraGotoRot = 0x1d2,
    SubCall = 0x1d4,
    PointOutRememberInit = 0x1d6,
    PointOutRememberType = 0x1d7,
    PointOutRememberShow = 0x1d8,
    PointOutRememberHide = 0x1d9,
    PointOutRememberEnd = 0x1da,
    DebugChrPos = 0x1e1,
    CameraGotoRoll = 0x1e2,
    CameraGotoDepth = 0x1e4,
    MoviePlayEx = 0x1e8,
    ChrGotoPos = 0x1e9,
    ChrGotoPosSelect = 0x1ea,
    ChrGotoRotY = 0x1eb,
    ThrustForcePairReasoning = 0x1ec,
    ConclusionDisp = 0x1f0,
    ConclusionDispUpdate = 0x1f2,
    ConclusionWait = 0x1f3,
    RubySpecial = 0x1fa,
    PairReasoningInit = 0x1fb,
    PairReasoningSpecialMode = 0x1fc,
    PairReasoning = 0x1fd,
    PairReasoningFinish = 0x1fe,
    DtcMoveFlagSet = 0x1ff,
    MoviePlayLimit = 0x200,
    BgmPreparePause = 0x201,
    BgmPrepareResume = 0x202,
    RubySet = 0x203,
    RubyOff = 0x204,
    PairReasoningCaptureReset = 0x205,
    RubyEnd = 0x206,
    ChrDelAllFade = 0x207,
    MsgCondition = 0x208,
    ChrDelAll = 0x209,
    SpotSet = 0x20a,
    SpotAnime = 0x20b,
    SpotWait = 0x20c,
    SpotAnimeFade = 0x20d,
    SpotGotoPos = 0x20e,
    SpotGotoSize = 0x20f,
    ExamMStart = 0x210,
    ExamMEnd = 0x211,
    ExamMWitnessInit = 0x212,
    ExamMWitnessSet = 0x213,
    ExamMPursueInit = 0x214,
    ExamMMissSet = 0x215,
    ExamMAnswerStart = 0x216,
    ExamMAnswerEnd = 0x217,
    ExamMMissSpStart = 0x218,
    ExamMMissSpEnd = 0x219,
    JurorBattleStart = 0x21a,
    JurorBattleEnd = 0x21b,
    MsgJurorBattle = 0x21c,
    JurorInfoInit = 0x21d,
    JurorInfoSet = 0x21e,
    JurorBattleMessSet = 0x21f,
    JurorBattleHitInit = 0x220,
    JurorBattleHitMissSet = 0x221,
    JurorBattleJudgeSet = 0x223,
    CameraGotoSelection = 0x224,
    ChrDirectCamera = 0x225,
    MasterFadeScene = 0x226,
    MasterFadeSceneFlashBackOut = 0x227,
    MasterFadeSceneFlashBackIn = 0x228,
    CameraGotoPan = 0x22a,
    CameraGotoFrameRatio = 0x22b,
    CameraGotoPanSelect = 0x22c,
    BattleTitleOpen = 0x22d,
    BattleCaptionOpen = 0x22e,
    BattleCaptionClose = 0x22f,
    MimawasuSeal = 0x230,
    MimawasuDisable = 0x231,
    MsgWindowOff = 0x232,
    MsgWindowOn = 0x233,
    VoicePlay = 0x236,
    VoiceEnd = 0x237,
    PairReasoningMessageStart = 0x239,
    PairReasoningMessageEnd = 0x23a,
    CameraRecord = 0x23b,
    CameraUndo = 0x23c,
    PairReasoningCameraDemo = 0x23d,
    WitnessFeelOn = 0x23e,
    WitnessFeelOff = 0x23f,
    WitnessFeelWait = 0x240,
    PairReasoningHitSet = 0x241,
    BranchThrustForcePairReasoning = 0x242,
    PairFeelOn = 0x243,
    PairFeelOff = 0x244,
    PairFeelWait = 0x245,
    PairReasoningDemo = 0x246,
    PairReasoningDemoFailEnd = 0x247,
    PairReasoningTopicDemo = 0x248,
    PairReasoningTopicWait = 0x249,
    PairReasoningTopicMessageSet = 0x24a,
    PairReasoningNameChange = 0x24b,
    BranchPairReasoning = 0x24c,
    PageClearPairReasoning = 0x24d,
    PairReasoningMessageWait = 0x24e,
    PairReasoningGlassWait = 0x24f,
    JurorBalanceInit = 0x250,
    JurorBalanceSet = 0x251,
    JurorBalanceWait = 0x252,
    JurorBalanceRestart = 0x253,
    JurorFireSet = 0x254,
    JurorFireWait = 0x255,
    JurorModelForceLow = 0x256,
    PairReasoningNameChangeConditional = 0x257,
    PageClearDummyPairReasoning = 0x258,
    QuakeShort = 0x259,
    SHO2 = 0x25a,
    DAM2 = 0x25b,
    CRI0 = 0x25c,
    CRI2 = 0x25d,
    SKN2 = 0x25e,
    PairCaption = 0x25f,
    PairReasoningProgress = 0x260,
    PairReasoningProgressUpdate = 0x261,
    PairReasoningProgressSet = 0x262,
    PairReasoningProgressWait = 0x263,
    PairReasoningSetBgm = 0x264,
    MsgWindowOnQuick = 0x266,
    MsgWindowOffQuick = 0x267,
    JurorFireDemoStart = 0x26b,
    JurorFireDemoWait = 0x26c,
    JurorSeatChange = 0x26d,
    JurorSeatUpdate = 0x26e,
    JurorSeatWait = 0x26f,
    JurorFireFlameSet = 0x270,
    JurorFireFlameFinish = 0x271,
    JurorFireDemoHotStart = 0x272,
    BokehOn = 0x275,
    BokehOff = 0x276,
    BokehWait = 0x277,
    TalkSet = 0x27c,
    TalkDel = 0x27d,
    TalkChgR = 0x27e,
    TalkWait = 0x27f,
    CourtRecordTutorial = 0x289,
    MimawasuTutorial = 0x28a,
    Cre1_Init = 0x293,
    Cre1_End = 0x294,
    Cre1_Play = 0x295,
    Cre1_Wait = 0x296,
    Cre1_Scope = 0x297,
    Cre2_Init = 0x298,
    Cre2_End = 0x299,
    Cre2_Play = 0x29a,
    Cre2_Scroll = 0x29b,
    Cre2_Wait = 0x29c,
    Cre2_BgmTiming = 0x29d,
    Cre2Bg_Init = 0x29f,
    Cre2Bg_End = 0x2a0,
    Cre2Bg_Play = 0x2a1,
    Cre2Bg_Scroll = 0x2a2,
    Cre2Bg_Wait = 0x2a3,
    DLCReturnMenu = 0x2a7,
    KeepPlaceName = 0x2a8,
    BranchEnglish = 0x2d7,
    BranchTgsTrial = 0x2d9,
    BranchTgsEvent = 0x2da,
    TgsTrialEnd = 0x2db,
    TrialEnd = 0x2dc,
    TrialAutoReset = 0x2dd,
    BranchTrialDL = 0x2de,
    BranchTrialNW = 0x2df,
    BranchCourtEvidenceSet = 0x30b,
    CourtTalkEnd = 0x30c,
    CourtEvidenceDemoMotionSet = 0x30d,
    CourtEvidenceDemoCameraSet = 0x30e,
    CourtEvidenceDemoWait = 0x30f,
    CourtEvidenceAtariChange = 0x310,
    CourtEvidenceInnerCamera = 0x311,
    CourtEvidenceChangeBackBtn = 0x312,
    CourtEvidenceSetPartsDisp = 0x313,
    RowExcel = 0x31f,
}

fn split_message(message: &str) -> Vec<(bool, String)> {
    let mut messages = vec![];
    let mut is_tag = false;

    let mut current_string = "".to_string();
    for c in message.chars() {
        if c == '<' && !is_tag {
            is_tag = true;
            messages.push((false, current_string));
            current_string = c.to_string();
        } else if c == '>' && is_tag {
            is_tag = false;
            current_string.push(c);
            messages.push((true, current_string));
            current_string = "".to_string();
        } else {
            current_string.push(c);
        }
    }
    messages.push((is_tag, current_string));

    messages
}

struct GlobalResources {
    gmd: GuiMessageFile,
    table_id_movie: mtserializer::Class,
    name_tag_gmd: GuiMessageFile,
}

fn parse_tag(global_resources: &GlobalResources, tag: TagCommandMinusOne, args: &[&str]) -> String {
    match tag {
        TagCommandMinusOne::MoviePlay => {
            let movie_index = args[0].parse::<usize>().unwrap();
            let movie = get_enum_value!(
                &get_enum_value!(
                    &global_resources
                        .table_id_movie
                        .get_prop("list")
                        .unwrap()
                        .values()[movie_index],
                    PropertyValue::Class
                )
                .as_ref()
                .unwrap()
                .get_prop("path")
                .unwrap()
                .values()[0],
                PropertyValue::String
            );

            return format!("movie path: {}", movie);
        }
        TagCommandMinusOne::MsgWindowOn => {
            let nametag_index = args[0].parse::<usize>().unwrap();

            return global_resources.name_tag_gmd.messages()[nametag_index].message.clone();
        }
        TagCommandMinusOne::Msg => {
            // first one is the actual character i think?
            let nametag_index = args[1].parse::<usize>().unwrap();

            return global_resources.name_tag_gmd.messages()[nametag_index].message.clone();
        }
        _ => "".to_string(),
    }
}

fn load_table(table: &str) -> anyhow::Result<Class> {
    let path = format!("table/GO/table/APP_TABLE_{}.prp", table);

    let mut file = mtserializer::prp_file_to_mtserializer(&mut std::fs::File::open(&path)?)?;

    let deserialized = mtserializer::deserialize(&mut file)?;

    Ok(deserialized)
}

fn main() -> anyhow::Result<()> {
    env_logger::init();

    let args: Vec<_> = std::env::args().collect();

    let mut gmd_file = std::fs::File::open(&args[1])?;
    let mut name_gmd_file = std::fs::File::open("/home/user/Desktop/WIN11-vm-folder/TGAAC-for-research/nativeDX11x64_UNPACKED/archive/GO/msg_title_eng/GO/msg/name_eng.gmd")?;
    let global_resources = GlobalResources {
        gmd: GuiMessageFile::new(&mut gmd_file)?,
        table_id_movie: load_table("ID_MOVIE")?,
        name_tag_gmd: GuiMessageFile::new(&mut name_gmd_file)?,
    };

    for message in global_resources.gmd.messages() {
        println!("message label: {}", message.label);
        for (is_tag, message) in split_message(&message.message) {
            if is_tag {
                assert_eq!(message.chars().next().unwrap(), '<');
                assert_eq!(message.chars().last().unwrap(), '>');
                let tag_str: Vec<&str> = message[1..message.len() - 1].split(' ').collect();
                let [tag, args @ ..] = &tag_str[..] else {
                    panic!("invalid tag")
                };
                print!("\t\tTAG ");
                let mut tag_chariter = tag.chars();
                if tag_chariter.next() == Some('E') {
                    let tag_command = tag_chariter.collect::<String>().parse::<usize>()?;
                    if let Some(tag_command_enum) = TagCommandMinusOne::from_repr(tag_command - 1) {
                        print!(
                            "{:?} [{}] PARSED [{}]",
                            tag_command_enum,
                            tag_command,
                            parse_tag(&global_resources, tag_command_enum, &args)
                        );
                    } else {
                        print!("UNKNOWN [{}] ", tag_command);
                    }
                } else {
                    print!("{} ", tag);
                }

                println!("({args:?})");
            } else if !message.is_empty() {
                println!("MESSAGE {:?}", message);
            }
        }
    }

    Ok(())
}
