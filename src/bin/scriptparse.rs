use mt_renderer::{
    get_enum_value,
    mtserializer::{self, Class, PropertyValue},
    rguimessage::GuiMessageFile,
};

#[allow(non_camel_case_types)]
#[derive(Debug, strum::FromRepr, Copy, Clone)]
enum TagCommand {
    EndScript = 1,
    Wait = 3,
    Jump = 4,
    FontColor00 = 5,
    FontColor01 = 6,
    FontColor02 = 7,
    FontColor03 = 8,
    FontColor04 = 9,
    FontColor05 = 0xA,
    FontColor06 = 0xB,
    FontColor07 = 0xC,
    FontColor08 = 0xD,
    FontColor09 = 0xE,
    FontColor10 = 0xF,
    FontColor11 = 0x10,
    FontColor12 = 0x11,
    FontColor13 = 0x12,
    FontColor14 = 0x13,
    RegSet = 0x14,
    BranchReg = 0x15,
    BranchRand = 0x16,
    PageClear = 0x17,
    PageClearAuto = 0x18,
    TextSpeed = 0x19,
    Call = 0x1A,
    PageClearDummy = 0x1B,
    FlagOn = 0x1C,
    FlagOff = 0x1D,
    BranchFlag = 0x1E,
    SceneJump = 0x1F,
    BranchScenarioJump = 0x20,
    CallExternal = 0x21,
    CallRand = 0x22,
    SetPrintPage = 0x23,
    SetPrintDisp = 0x24,
    RegAdd = 0x25,
    RegSub = 0x26,
    CallRandPair = 0x27,
    RightAdjust = 0x28,
    Msg = 0x29,
    CenterText = 0x2A,
    AYA2 = 0x2B,
    AYA3 = 0x2C,
    BAK2 = 0x2D,
    GEK2 = 0x2E,
    BranchFlags = 0x32,
    BranchFlagsSet = 0x33,
    BranchScene = 0x34,
    MsgSkipInvalid = 0x35,
    MsgSe = 0x36,
    OpDemoTitle = 0x37,
    CourtFileBtnVisible = 0x38,
    OpTitle = 0x39,
    BranchCamera = 0x3A,
    ThumbnailOn = 0x3C,
    ThumbnailOff = 0x3D,
    ThumbnailOnScreen = 0x3E,
    ThumbnailOffAt = 0x3F,
    ThumbnailFadeSwap = 0x40,
    FilterSet = 0x41,
    FilterWait = 0x42,
    Large = 0x43,
    PageClearLarge = 0x44,
    BgmVolumeOf = 0x45,
    MasterFade = 0x46,
    MasterFadeWait = 0x47,
    BgFade = 0x48,
    BgFadeWait = 0x49,
    FadeModel = 0x4A,
    FadeModelWait = 0x4B,
    FlashBack = 0x4D,
    ButtonFlicker = 0x4E,
    LoadingEnd = 0x50,
    BgmContext = 0x51,
    BgmWait = 0x52,
    BgmSwap = 0x53,
    BgmFadeOutOf = 0x54,
    BgmPlay = 0x55,
    SePlay = 0x56,
    SeStop = 0x58,
    BgmVolume = 0x59,
    SeVolume = 0x5A,
    BgmFadeIn = 0x5B,
    BgmFadeOut = 0x5C,
    SeFadeIn = 0x5D,
    SeFadeOut = 0x5E,
    SeLoad = 0x5F,
    SeUnload = 0x60,
    SeWait = 0x61,
    SeKeyoff = 0x62,
    SeVolumeOf = 0x63,
    ItemAdd = 0x64,
    ItemRemove = 0x65,
    ItemRemoveAll = 0x66,
    EvidenceGet = 0x67,
    EvidenceGetWait = 0x68,
    EvidenceUpdate = 0x69,
    ItemUpdate = 0x6A,
    BranchItem = 0x6B,
    BranchItems = 0x6C,
    BranchItemsSet = 0x6D,
    ProfileGet = 0x6E,
    ProfileUpdate = 0x6F,
    BgmPlayVolume = 0x70,
    BgmWaitOf = 0x71,
    SetAnotherCut = 0x73,
    InvDetailCameraSet = 0x74,
    BgOrnamentFadeWait = 0x77,
    BgSet = 0x78,
    BgOrnament = 0x79,
    UseBgCameraOnly = 0x7A,
    BgChange = 0x7B,
    CameraSetChr = 0x7C,
    ChrStopSe = 0x7D,
    CameraDemoLoop = 0x7E,
    ChrSetShadow = 0x7F,
    ChrDelShadow = 0x80,
    CameraDemo = 0x81,
    CameraSet = 0x82,
    CameraWait = 0x83,
    FontEnglish = 0x84,
    FontEnglishEnd = 0x85,
    CameraDoShortRotation = 0x86,
    ChrPosSet = 0x87,
    ChrAnimeShort = 0x88,
    ChrWaitWithoutMot = 0x8A,
    ChrWaitEvent = 0x8B,
    ChrSet = 0x8C,
    ChrDel = 0x8D,
    ChrSetBG = 0x8E,
    ChrDelWitness = 0x8F,
    ChrWait = 0x90,
    ChrAnime = 0x91,
    ChrAnimeNoStart = 0x93,
    ChrSetNoStart = 0x94,
    ChrFace = 0x95,
    ChrLoadMulti = 0x97,
    ChrLoad = 0x98,
    ChrUnload = 0x99,
    ChrPos = 0x9A,
    ChrPosBg = 0x9B,
    ChrMatChg = 0x9C,
    ChrVisible = 0x9D,
    BranchChrSet = 0x9E,
    ChrAnimeRepeat = 0xA0,
    ChrUnloadAll = 0xA1,
    ChrSetChild = 0xA2,
    ChrAnimeSpecial = 0xA4,
    ChrAnimeSpecialNoSe = 0xA5,
    ChrSetSlide = 0xA6,
    ChrSetSlideNoStart = 0xA7,
    ChrDelSlide = 0xA8,
    ChrMouth = 0xA9,
    ChrAlpha = 0xAA,
    ChrSight = 0xAB,
    ChrSightSp = 0xAC,
    ChrSightOff = 0xAD,
    ScrollShow = 0xAE,
    ScrollEnd = 0xAF,
    ScrollMove = 0xB0,
    ScrollWait = 0xB1,
    BandRot = 0xB2,
    BandRotOff = 0xB3,
    ChrSightAllReset = 0xB4,
    BigFont = 0xBE,
    BigFontWait = 0xBF,
    BigFontOff = 0xC0,
    MarkTestimony = 0xC2,
    Testimony = 0xC3,
    TestimonyWait = 0xC4,
    Guilty = 0xC7,
    GuiltyWait = 0xC8,
    NotGuilty = 0xC9,
    RetryTopicFlag = 0xCA,
    Examine = 0xCD,
    ExamineWait = 0xCE,
    ScenarioMode = 0xCF,
    HammerPlay = 0xD0,
    HammerWait = 0xD1,
    DemoPlay = 0xD2,
    DemoWait = 0xD3,
    PageClearIgiariWait = 0xD4,
    HammerPlayStopSound = 0xD5,
    NowDataSet = 0xD6,
    MoveButtonVisible = 0xD7,
    TopicBackButtonVisible = 0xD8,
    InvEviGoto = 0xDA,
    InvEviRet = 0xDB,
    ChoiceStart = 0xDC,
    ChoiceInit = 0xDD,
    ChoiceSet = 0xDE,
    ChoiceJump = 0xDF,
    ThrustForce = 0xE0,
    BranchThrustForce = 0xE1,
    BranchThrustForce2 = 0xE2,
    OpDemoPlay = 0xE3,
    OpDemoWait = 0xE4,
    OpDemoEnd = 0xE5,
    DemoEnd = 0xE6,
    BranchThrustForce3 = 0xE7,
    ExamMessInit = 0xF0,
    ExamMessSet = 0xF1,
    ExamMessEnd = 0xF2,
    ExamStart = 0xF3,
    ExamAnswerSet = 0xF4,
    ExamMessNextSet = 0xF5,
    BranchExamNextFollow = 0xF8,
    BranchExamFaild = 0xF9,
    PlayerSet = 0x102,
    MsgExamPartner = 0x104,
    BloodEffect = 0x10E,
    WineEffect = 0x10F,
    InvEvidenceMotion = 0x111,
    InvEvidenceMotionWait = 0x112,
    InvEvidenceValidHits = 0x113,
    InvEvidenceReady = 0x114,
    InvEvidenceStartTutorial = 0x115,
    InvSaveCharacter = 0x116,
    GaugePreDamage = 0x117,
    GaugeIn = 0x118,
    GaugeOut = 0x119,
    GaugeWait = 0x11A,
    GaugeDamage = 0x11B,
    BranchLifeZero = 0x11C,
    GaugeReset = 0x11E,
    RetryItemStore = 0x11F,
    RetryItemStore2 = 0x120,
    InvUse2DCamera = 0x121,
    InvEvidenceDemo = 0x122,
    InvEvidenceFinish = 0x123,
    InvEvidenceInit = 0x124,
    InvEvidenceStart = 0x125,
    TopViewWait = 0x126,
    TopViewPOInit = 0x127,
    TopViewOpen = 0x128,
    TopViewNext = 0x129,
    TopViewSet = 0x12A,
    TopViewClose = 0x12B,
    EventShow = 0x12C,
    EventEnd = 0x12D,
    TextcutShow = 0x12E,
    TextcutEnd = 0x12F,
    EventFadeSwap = 0x130,
    EventFadeWait = 0x131,
    POInit = 0x132,
    POStart = 0x133,
    POPointClose = 0x134,
    POEventClose = 0x135,
    POFinish = 0x136,
    InvInit = 0x137,
    InvCamAdd = 0x138,
    InvLabelSet = 0x139,
    BranchHit = 0x13A,
    InvDetailCamera = 0x13B,
    InvCameraWait = 0x13C,
    InvCameraReturn = 0x13D,
    InvHitSet = 0x13E,
    InvMotionSet = 0x13F,
    InvMotionWait = 0x140,
    InvCameraSet = 0x141,
    InvConditionAdd = 0x142,
    InvSetFinish = 0x143,
    InvOpen = 0x144,
    BranchInvCondition = 0x145,
    InvLabelSetEvi = 0x146,
    BranchHitEvidence = 0x147,
    InvUseLumi = 0x148,
    OrnamentUseColor = 0x149,
    AYA = 0x14A,
    DAM = 0x14B,
    GEK = 0x14C,
    HIR = 0x14D,
    HIR2 = 0x14E,
    SHO = 0x14F,
    Flash = 0x152,
    Flash2 = 0x153,
    FlashWait = 0x154,
    Quake0 = 0x155,
    Quake1 = 0x156,
    Quake2 = 0x157,
    QuakeWait = 0x158,
    BAK = 0x159,
    SKN = 0x15A,
    QuakeA = 0x15B,
    DAM0 = 0x15C,
    GEK0 = 0x15D,
    SHO0 = 0x15F,
    BAK0 = 0x160,
    SKN0 = 0x161,
    BranchExamThrust = 0x163,
    CRI = 0x164,
    GameNewOver = 0x169,
    GameOverPair = 0x16A,
    GameOverPanelLess = 0x16B,
    DetectiveSupporterType = 0x16F,
    DetectiveTalkSetEnd = 0x170,
    DetectiveInit = 0x171,
    DetectiveIndexInit = 0x172,
    DetectiveMode = 0x173,
    DetectiveSetIndexTalk = 0x174,
    DetectiveSetIndexInvest = 0x175,
    DetectiveSetIndexMove = 0x176,
    DetectiveSetIndexThrust = 0x177,
    DetectiveTalkForceIn = 0x178,
    DetectiveTalkSet = 0x179,
    DetectiveTalkUpdate = 0x17A,
    DetectiveThrustInit = 0x17B,
    DetectiveThrustSet = 0x17C,
    BranchDetectiveThrust = 0x17D,
    DetectiveIndexInitEnd = 0x17E,
    DetectiveInvestLabel = 0x17F,
    BranchDetectiveSetup = 0x180,
    DetectiveTopicInit = 0x181,
    DetectiveMoveSet = 0x182,
    DetectiveMoveCloseReturn = 0x183,
    DetectiveTalkSetConditional = 0x184,
    DetectiveMoveMsg = 0x185,
    DetectiveEndInit = 0x186,
    DetectiveEndItemSet = 0x187,
    DetectiveEndFlagSet = 0x188,
    DetectiveStart = 0x189,
    BranchDetectiveEnd = 0x18A,
    IntervalOpen = 0x18B,
    IntervalOpenWait = 0x18C,
    Interval = 0x18D,
    DetectiveDefaultMode = 0x18E,
    SetAntiAlias = 0x18F,
    DetectiveTalkInsert = 0x190,
    DetectiveButtonEventSet = 0x192,
    DetectiveButtonEventClear = 0x193,
    DetectiveMoveExplainSet = 0x194,
    DetectiveMoveExplainSetConditional = 0x195,
    DetectiveMoveAdd = 0x196,
    Witness = 0x197,
    BranchWitness = 0x198,
    DetectiveMoveAddCkFlag = 0x199,
    IconA = 0x1A4,
    IconB = 0x1A5,
    IconY = 0x1A6,
    IconX = 0x1A7,
    IconL = 0x1A8,
    IconR = 0x1A9,
    IconCross = 0x1AA,
    IconSlide = 0x1AB,
    IconRecord = 0x1AC,
    IconThrust = 0x1AD,
    IconSway = 0x1AE,
    IconCheck = 0x1AF,
    IconQuestion = 0x1B0,
    IconDetail = 0x1B1,
    IconHit = 0x1B2,
    IconReturn = 0x1B3,
    PanelMessageStart = 0x1B4,
    PanelMessageEnd = 0x1B5,
    EventMove = 0x1B8,
    EventMoveWait = 0x1B9,
    EventShowBg = 0x1BC,
    MoviePlay = 0x1BD,
    MovieWait = 0x1BE,
    LinePlay = 0x1BF,
    MemoSetTask = 0x1C1,
    MemoAllRemove = 0x1C2,
    MemoTaskFinish = 0x1C3,
    MemoSetSummary = 0x1C4,
    EventFadeOutBg = 0x1C6,
    MemoSetSummaryP2 = 0x1C7,
    PushFlag = 0x1C9,
    PopFlag = 0x1CA,
    MsgPre = 0x1CB,
    CameraGotoPosition = 0x1CE,
    CameraGotoFocus = 0x1D0,
    CameraGotoFov = 0x1D2,
    CameraGotoRot = 0x1D3,
    SubCall = 0x1D5,
    PointOutRememberInit = 0x1D7,
    PointOutRememberType = 0x1D8,
    PointOutRememberShow = 0x1D9,
    PointOutRememberHide = 0x1DA,
    PointOutRememberEnd = 0x1DB,
    DebugChrPos = 0x1E2,
    CameraGotoRoll = 0x1E3,
    CameraGotoDepth = 0x1E5,
    MoviePlayEx = 0x1E9,
    ChrGotoPos = 0x1EA,
    ChrGotoPosSelect = 0x1EB,
    ChrGotoRotY = 0x1EC,
    ThrustForcePairReasoning = 0x1ED,
    ConclusionDisp = 0x1F1,
    ConclusionDispUpdate = 0x1F3,
    ConclusionWait = 0x1F4,
    RubySpecial = 0x1FB,
    PairReasoningInit = 0x1FC,
    PairReasoningSpecialMode = 0x1FD,
    PairReasoning = 0x1FE,
    PairReasoningFinish = 0x1FF,
    DtcMoveFlagSet = 0x200,
    MoviePlayLimit = 0x201,
    BgmPreparePause = 0x202,
    BgmPrepareResume = 0x203,
    RubySet = 0x204,
    RubyOff = 0x205,
    PairReasoningCaptureReset = 0x206,
    RubyEnd = 0x207,
    ChrDelAllFade = 0x208,
    MsgCondition = 0x209,
    ChrDelAll = 0x20A,
    SpotSet = 0x20B,
    SpotAnime = 0x20C,
    SpotWait = 0x20D,
    SpotAnimeFade = 0x20E,
    SpotGotoPos = 0x20F,
    SpotGotoSize = 0x210,
    ExamMStart = 0x211,
    ExamMEnd = 0x212,
    ExamMWitnessInit = 0x213,
    ExamMWitnessSet = 0x214,
    ExamMPursueInit = 0x215,
    ExamMMissSet = 0x216,
    ExamMAnswerStart = 0x217,
    ExamMAnswerEnd = 0x218,
    ExamMMissSpStart = 0x219,
    ExamMMissSpEnd = 0x21A,
    JurorBattleStart = 0x21B,
    JurorBattleEnd = 0x21C,
    MsgJurorBattle = 0x21D,
    JurorInfoInit = 0x21E,
    JurorInfoSet = 0x21F,
    JurorBattleMessSet = 0x220,
    JurorBattleHitInit = 0x221,
    JurorBattleHitMissSet = 0x222,
    JurorBattleJudgeSet = 0x224,
    CameraGotoSelection = 0x225,
    ChrDirectCamera = 0x226,
    MasterFadeScene = 0x227,
    MasterFadeSceneFlashBackOut = 0x228,
    MasterFadeSceneFlashBackIn = 0x229,
    CameraGotoPan = 0x22B,
    CameraGotoFrameRatio = 0x22C,
    CameraGotoPanSelect = 0x22D,
    BattleTitleOpen = 0x22E,
    BattleCaptionOpen = 0x22F,
    BattleCaptionClose = 0x230,
    MimawasuSeal = 0x231,
    MimawasuDisable = 0x232,
    MsgWindowOff = 0x233,
    MsgWindowOn = 0x234,
    VoicePlay = 0x237,
    VoiceEnd = 0x238,
    PairReasoningMessageStart = 0x23A,
    PairReasoningMessageEnd = 0x23B,
    CameraRecord = 0x23C,
    CameraUndo = 0x23D,
    PairReasoningCameraDemo = 0x23E,
    WitnessFeelOn = 0x23F,
    WitnessFeelOff = 0x240,
    WitnessFeelWait = 0x241,
    PairReasoningHitSet = 0x242,
    BranchThrustForcePairReasoning = 0x243,
    PairFeelOn = 0x244,
    PairFeelOff = 0x245,
    PairFeelWait = 0x246,
    PairReasoningDemo = 0x247,
    PairReasoningDemoFailEnd = 0x248,
    PairReasoningTopicDemo = 0x249,
    PairReasoningTopicWait = 0x24A,
    PairReasoningTopicMessageSet = 0x24B,
    PairReasoningNameChange = 0x24C,
    BranchPairReasoning = 0x24D,
    PageClearPairReasoning = 0x24E,
    PairReasoningMessageWait = 0x24F,
    PairReasoningGlassWait = 0x250,
    JurorBalanceInit = 0x251,
    JurorBalanceSet = 0x252,
    JurorBalanceWait = 0x253,
    JurorBalanceRestart = 0x254,
    JurorFireSet = 0x255,
    JurorFireWait = 0x256,
    JurorModelForceLow = 0x257,
    PairReasoningNameChangeConditional = 0x258,
    PageClearDummyPairReasoning = 0x259,
    QuakeShort = 0x25A,
    SHO2 = 0x25B,
    DAM2 = 0x25C,
    CRI0 = 0x25D,
    CRI2 = 0x25E,
    SKN2 = 0x25F,
    PairCaption = 0x260,
    PairReasoningProgress = 0x261,
    PairReasoningProgressUpdate = 0x262,
    PairReasoningProgressSet = 0x263,
    PairReasoningProgressWait = 0x264,
    PairReasoningSetBgm = 0x265,
    MsgWindowOnQuick = 0x267,
    MsgWindowOffQuick = 0x268,
    JurorFireDemoStart = 0x26C,
    JurorFireDemoWait = 0x26D,
    JurorSeatChange = 0x26E,
    JurorSeatUpdate = 0x26F,
    JurorSeatWait = 0x270,
    JurorFireFlameSet = 0x271,
    JurorFireFlameFinish = 0x272,
    JurorFireDemoHotStart = 0x273,
    BokehOn = 0x276,
    BokehOff = 0x277,
    BokehWait = 0x278,
    TalkSet = 0x27D,
    TalkDel = 0x27E,
    TalkChgR = 0x27F,
    TalkWait = 0x280,
    CourtRecordTutorial = 0x28A,
    MimawasuTutorial = 0x28B,
    Cre1_Init = 0x294,
    Cre1_End = 0x295,
    Cre1_Play = 0x296,
    Cre1_Wait = 0x297,
    Cre1_Scope = 0x298,
    Cre2_Init = 0x299,
    Cre2_End = 0x29A,
    Cre2_Play = 0x29B,
    Cre2_Scroll = 0x29C,
    Cre2_Wait = 0x29D,
    Cre2_BgmTiming = 0x29E,
    Cre2Bg_Init = 0x2A0,
    Cre2Bg_End = 0x2A1,
    Cre2Bg_Play = 0x2A2,
    Cre2Bg_Scroll = 0x2A3,
    Cre2Bg_Wait = 0x2A4,
    DLCReturnMenu = 0x2A8,
    KeepPlaceName = 0x2A9,
    BranchEnglish = 0x2D8,
    BranchTgsTrial = 0x2DA,
    BranchTgsEvent = 0x2DB,
    TgsTrialEnd = 0x2DC,
    TrialEnd = 0x2DD,
    TrialAutoReset = 0x2DE,
    BranchTrialDL = 0x2DF,
    BranchTrialNW = 0x2E0,
    BranchCourtEvidenceSet = 0x30C,
    CourtTalkEnd = 0x30D,
    CourtEvidenceDemoMotionSet = 0x30E,
    CourtEvidenceDemoCameraSet = 0x30F,
    CourtEvidenceDemoWait = 0x310,
    CourtEvidenceAtariChange = 0x311,
    CourtEvidenceInnerCamera = 0x312,
    CourtEvidenceChangeBackBtn = 0x313,
    CourtEvidenceSetPartsDisp = 0x314,
    RowExcel = 0x320,
}

fn split_message(message: &str) -> Vec<(bool, String)> {
    let mut messages = vec![];
    let mut is_tag = false;

    let mut current_string = "".to_string();
    for c in message.chars() {
        if c == '<' && !is_tag {
            is_tag = true;
            messages.push((false, current_string));
            current_string = c.to_string();
        } else if c == '>' && is_tag {
            is_tag = false;
            current_string.push(c);
            messages.push((true, current_string));
            current_string = "".to_string();
        } else {
            current_string.push(c);
        }
    }
    messages.push((is_tag, current_string));

    messages
}

struct GlobalResources {
    gmd: GuiMessageFile,
    table_id_movie: mtserializer::Class,
    name_tag_gmd: GuiMessageFile,
}

fn parse_tag(global_resources: &GlobalResources, tag: TagCommand, args: &[&str]) -> String {
    match tag {
        TagCommand::MoviePlay => {
            let movie_index = args[0].parse::<usize>().unwrap();
            let movie = get_enum_value!(
                &get_enum_value!(
                    &global_resources
                        .table_id_movie
                        .get_prop("list")
                        .unwrap()
                        .values()[movie_index],
                    PropertyValue::Class
                )
                .as_ref()
                .unwrap()
                .get_prop("path")
                .unwrap()
                .values()[0],
                PropertyValue::String
            );

            return format!("movie path: {}", movie);
        }
        TagCommand::MsgWindowOn => {
            let nametag_index = args[0].parse::<usize>().unwrap();

            return global_resources.name_tag_gmd.messages()[nametag_index].message.clone();
        }
        TagCommand::Msg => {
            // first one is the actual character i think?
            let nametag_index = args[1].parse::<usize>().unwrap();

            return global_resources.name_tag_gmd.messages()[nametag_index].message.clone();
        }
        _ => "".to_string(),
    }
}

fn load_table(table: &str) -> anyhow::Result<Class> {
    let path = format!("table/GO/table/APP_TABLE_{}.prp", table);

    let mut file = mtserializer::prp_file_to_mtserializer(&mut std::fs::File::open(&path)?)?;

    let deserialized = mtserializer::deserialize(&mut file)?;

    Ok(deserialized)
}

fn main() -> anyhow::Result<()> {
    env_logger::init();

    let args: Vec<_> = std::env::args().collect();

    let mut gmd_file = std::fs::File::open(&args[1])?;
    let mut name_gmd_file = std::fs::File::open("/home/user/Desktop/WIN11-vm-folder/TGAAC-for-research/nativeDX11x64_UNPACKED/archive/GO/msg_title_eng/GO/msg/name_eng.gmd")?;
    let global_resources = GlobalResources {
        gmd: GuiMessageFile::new(&mut gmd_file)?,
        table_id_movie: load_table("ID_MOVIE")?,
        name_tag_gmd: GuiMessageFile::new(&mut name_gmd_file)?,
    };

    for message in global_resources.gmd.messages() {
        println!("message label: {}", message.label);
        for (is_tag, message) in split_message(&message.message) {
            if is_tag {
                assert_eq!(message.chars().next().unwrap(), '<');
                assert_eq!(message.chars().last().unwrap(), '>');
                let tag_str: Vec<&str> = message[1..message.len() - 1].split(' ').collect();
                let [tag, args @ ..] = &tag_str[..] else {
                    panic!("invalid tag")
                };
                print!("\t\tTAG ");
                let mut tag_chariter = tag.chars();
                if tag_chariter.next() == Some('E') {
                    let tag_command = tag_chariter.collect::<String>().parse::<usize>()?;
                    if let Some(tag_command_enum) = TagCommand::from_repr(tag_command) {
                        print!(
                            "{:?} [{}] PARSED [{}]",
                            tag_command_enum,
                            tag_command,
                            parse_tag(&global_resources, tag_command_enum, &args)
                        );
                    } else {
                        print!("UNKNOWN [{}] ", tag_command);
                    }
                } else {
                    print!("{} ", tag);
                }

                println!("({args:?})");
            } else if !message.is_empty() {
                println!("MESSAGE {:?}", message);
            }
        }
    }

    Ok(())
}
